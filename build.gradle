buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("mysql:mysql-connector-java:5.1.39")
  }
}

plugins {
  id "net.saliman.cobertura" version "2.3.2"
  id "com.lv.dbdeploy" version "1.3"
}

apply plugin: 'checkstyle'

// checkstyle
checkstyle {
    ignoreFailures = true
    configFile = rootProject.file("config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = rootProject.file("config/checkstyle/suppressions.xml")
}

checkstyleTest.exclude '**/*.*'

// Workaround, ignore warning except error.
task verifyNoCheckstyleWarnings(type: GradleBuild) {
    doLast {
        File warningsFile = file('build/reports/checkstyle/main.xml')
        if (warningsFile.exists() && warningsFile.text.contains("severity=\"error\"")) {
            throw new GradleException("There were checkstyle warnings! For more info check $warningsFile")
        }
    }
}

checkstyleMain.finalizedBy verifyNoCheckstyleWarnings


// cobertura
cobertura {
    coverageFormats = ['html']
    coverageEncoding = 'UTF-8'
    coverageExcludes = ['.*domain.*',
                        '.*model.*',
                        '.*repository.*',
                        '.*ApplicationRunner.*',
                        '.*exception.*',
                        '.*filter.*']
    coverageIgnoreMethodAnnotations = []
    coverageCheckBranchRate = 80
    coverageCheckLineRate = 80
    coverageCheckPackageBranchRate = 80
    coverageCheckPackageLineRate = 80
    coverageCheckTotalBranchRate = 80
    coverageCheckTotalLineRate = 80
    coverageIgnoreTrivial = true
    //TODO temp disable test coverage
    coverageCheckHaltOnFailure = true
}

// update database
//CREATE TABLE changelog ( change_number INTEGER NOT NULL, complete_dt TIMESTAMP NOT NULL, applied_by VARCHAR(100) NOT NULL, description VARCHAR(500) NOT NULL );
//ALTER TABLE changelog ADD CONSTRAINT Pkchangelog PRIMARY KEY (change_number);

def envs = [
        "local"     : [
                "url"     : "jdbc:mysql://localhost:3306/mydb?useUnicode=yes&characterEncoding=UTF-8",
                "user"    : "root",
                "password": ""
        ],
        "dev"       : [
                "url"     : "jdbc:mysql://localhost:3306/mydb?useUnicode=yes&characterEncoding=UTF-8",
                "user"    : "root",
                "password": "password"
        ],
        "qa"        : [
                "url"     : "jdbc:mysql://localhost:3306/mydb?useUnicode=yes&characterEncoding=UTF-8",
                "user"    : "root",
                "password": "password"
        ],
        "uat"       : [
                "url"     : "jdbc:mysql://localhost:3306/mydb?useUnicode=yes&characterEncoding=UTF-8",
                "user"    : "root",
                "password": "password"
        ],
        "production": [
                "url"     : "jdbc:mysql://localhost:3306/mydb?useUnicode=yes&characterEncoding=UTF-8",
                "user"    : "root",
                "password": "password"
        ]
]

def config = envs["local"];

def dataFiles = [
        "local": "src/main/resources/db/local",
        "dev"  : "src/main/resources/db/dev",
        "qa"   : "src/main/resources/db/qa",
        "uat"  : "src/main/resources/db/uat",
        "prod" : "src/main/resources/db/prod"
]

dbdeploy {
    if (project.hasProperty("env")) {
        config = envs["$env"];
    }
    if (project.hasProperty("dbfile")) {
        datafile = dataFiles["$dbfile"];
    }
    scriptdirectory = file(datafile)
    driver = 'com.mysql.jdbc.Driver'
    url = config.url
    userid = config.userid
    password = config.password
}
